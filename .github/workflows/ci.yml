name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # ────────────────────────────────
  # Detect whether the Go service exists
  # ────────────────────────────────
  detect-go:
    runs-on: ubuntu-latest
    outputs:
      has_go: ${{ steps.check.outputs.has_go }}
    steps:
      - uses: actions/checkout@v4
      - id: check
        run: |
          if [ -f services/ledger/go.mod ]; then
            echo "has_go=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_go=false" >> "$GITHUB_OUTPUT"
          fi

  # ────────────────────────────────
  # Go unit tests + Docker build (only if present)
  # ────────────────────────────────
  test-go:
    runs-on: ubuntu-latest
    needs: detect-go
    if: ${{ needs.detect-go.outputs.has_go == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Download deps
        working-directory: services/ledger
        run: go mod download

      - name: Run Go tests
        working-directory: services/ledger
        run: go test ./... -v

      - name: Build ledger image
        working-directory: services/ledger
        run: docker build -t ledger .

  # ────────────────────────────────
  # SDK wheel / integration matrix
  # ────────────────────────────────
  python-sdk-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12, 3.13]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip and install test deps
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov fastapi uvicorn jsonschema

      - name: Install SDK in editable mode
        run: pip install -e ./sdk/python

      - name: Ensure netcat present
        run: |
          sudo apt-get update
          sudo apt-get install -y netcat-openbsd || sudo apt-get install -y netcat

      - name: Start mock Finastra API
        env:
          USE_MOCK_BALANCES: 1
        run: |
          uvicorn mocks.mock_finastra_api:app --host 0.0.0.0 --port 8000 &
          for i in {1..10}; do
            nc -z 127.0.0.1 8000 && break
            echo "Waiting for mock API..." && sleep 1
          done

      - name: Add repo root to PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)" >> "$GITHUB_ENV"

      - name: Run Python integration tests with coverage
        env:
          USE_MOCK_BALANCES: 1
          MOCK_API_URL: http://127.0.0.1:8000
        run: pytest --cov=bankersbank --cov-report=xml --cov-report=term integration-client

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}
          path: coverage.xml

  # ────────────────────────────────
  # Poetry-based workflow with Redis & Redpanda
  # ────────────────────────────────
  test-python-poetry:
    runs-on: ubuntu-latest
    steps:
      - name: No-op
        run: echo "Poetry workflow placeholder"

  # ────────────────────────────────
  # Observability lint: alert rules & dashboards
  # ────────────────────────────────
  observability-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Lint Prometheus alert rules
        uses: docker://prom/prometheus:v2.52.0
        with:
          args: >-
            promtool check rules /github/workspace/prometheus/alert_rules/observability.rules.yml

      - name: Verify Grafana dashboards are valid JSON
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          for f in grafana/dashboards/*.json; do
            echo "Validating $f"; jq empty "$f"; done
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv

      - name: Install dependencies (if not cached)
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

  # ────────────────────────────────
  # Run credit smoke test with docker compose
  # ────────────────────────────────
  compose-smoke-credit:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build images
        run: docker compose build credit_facility

      - name: Start stack (postgres + credit_facility)
        run: docker compose up -d postgres credit_facility

      - name: Wait for health
        run: |
          python - <<'PY'
          import time, urllib.request, sys
          def wait(url, path="/healthz", tries=180, delay=1.0):
              for _ in range(tries):
                  try:
                      with urllib.request.urlopen(url+path, timeout=2) as r:
                          if r.status == 200:
                              print("service healthy")
                              sys.exit(0)
                  except Exception:
                      pass
                  time.sleep(delay)
              print(f"Timed out waiting for {url}{path}", file=sys.stderr)
              sys.exit(1)
          wait("http://127.0.0.1:8050")
          PY

      - name: Set up Python for smoke
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install smoke deps
        run: python -m pip install --upgrade pip requests

      - name: Run credit smoke
        env:
          CREDIT_URL: http://127.0.0.1:8050
        run: python scripts/smoke_credit.py

      - name: Dump logs on failure
        if: failure()
        run: docker compose logs --no-color > compose-credit-logs.txt

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: compose-credit-logs
          path: compose-credit-logs.txt

      - name: Teardown
        if: always()
        run: docker compose down -v

  # ────────────────────────────────
  # Payments stack smoke with rails
  # ────────────────────────────────
  compose-smoke-payments:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build images
        run: docker compose build bank_connector

      - name: Start stack (postgres + mock_bank + bank_connector)
        run: docker compose up -d postgres mock_bank bank_connector

      - name: Wait for health
        run: |
          python - <<'PY'
          import time, urllib.request, sys
          def wait(url, path="/healthz", tries=180, delay=1.0):
              for _ in range(tries):
                  try:
                      with urllib.request.urlopen(url+path, timeout=2) as r:
                          if r.status == 200:
                              print("service healthy")
                              sys.exit(0)
                  except Exception:
                      pass
                  time.sleep(delay)
              print(f"Timed out waiting for {url}{path}", file=sys.stderr)
              sys.exit(1)
          wait("http://127.0.0.1:8080")
          PY

      - name: Set up Python for smoke
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install smoke deps
        run: python -m pip install --upgrade pip httpx fastapi prometheus-client sqlmodel

      - name: Run payments smoke
        env:
          PYTHONPATH: ${{ github.workspace }}
          BANK_API_URL: http://127.0.0.1:8080/post
        run: python scripts/smoke_payments.py

      - name: Dump logs on failure
        if: failure()
        run: docker compose logs --no-color > compose-payments-logs.txt

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: compose-payments-logs
          path: compose-payments-logs.txt

  # ────────────────────────────────
  # Liquidity stack smoke with quantengine
  # ────────────────────────────────
  compose-smoke-liquidity:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build quantengine
        run: docker compose build quantengine

      - name: Start quantengine only
        env:
          QUANT_DRY_RUN: "1"
          QUANT_CIRCUIT_OPEN: "0"
        run: docker compose up -d quantengine

      - name: Wait for health
        run: |
          python - <<'PY'
          import time, urllib.request, sys
          def wait(url, tries=180, delay=1.0):
              for _ in range(tries):
                  try:
                      with urllib.request.urlopen(url+'/readyz', timeout=2) as r:
                          if r.status == 200:
                              print('service healthy')
                              sys.exit(0)
                  except Exception:
                      pass
                  time.sleep(delay)
              print('Timed out waiting for service', file=sys.stderr)
              sys.exit(1)
          wait('http://127.0.0.1:9100')
          PY

      - name: Set up Python for smoke
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install smoke deps
        run: python -m pip install --upgrade pip requests

      - name: Run liquidity smoke
        env:
          QUANT_URL: http://127.0.0.1:9100
        run: python scripts/smoke_liquidity.py

      - name: Dump logs on failure
        if: failure()
        run: docker compose logs --no-color > compose-liquidity-logs.txt

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: compose-liquidity-logs
          path: compose-liquidity-logs.txt

      - name: Teardown
        if: always()
        run: docker compose down -v
