name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # ────────────────────────────────
  # Go unit tests + Docker builds
  # ────────────────────────────────
  test-go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run Go tests
        run: go test ./...

      - name: Build Docker images
        run: |
          docker build -t ledger ./services/ledger
          # repeat for other services as needed

  # ────────────────────────────────
  # SDK wheel / integration matrix
  # (from feature/mock-api-and-docs)
  # ────────────────────────────────
  python-sdk-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12, 3.13]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip and install test deps
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov fastapi uvicorn jsonschema

      - name: Install SDK in editable mode
        run: pip install -e ./sdk/python

      - name: Start mock Finastra API
        env:
          USE_MOCK_BALANCES: 1
        run: |
          uvicorn mocks.mock_finastra_api:app --host 0.0.0.0 --port 8000 &
          for i in {1..10}; do
            nc -z 127.0.0.1 8000 && break
            echo "Waiting for mock API..." && sleep 1
          done
      - name: Add repo root to PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

      - name: Run Python integration tests with coverage
        env:
          USE_MOCK_BALANCES: 1
          MOCK_API_URL: http://127.0.0.1:8000
        run: pytest --cov=bankersbank --cov-report=xml --cov-report=term integration-client

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}
          path: coverage.xml


  # ────────────────────────────────
  # Poetry-based workflow with lint,
  # type-checks & JSON-schema tests
  # (from main)
  # ────────────────────────────────
# TODO: Add status badge for mock-API CI job to README.md
  test-python-poetry:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies (if not cached)
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction
        
      - name: Install SDK package (editable)
        run: poetry run pip install -e sdk/python

      - name: Start mock Finastra API
        run: |
          poetry run pip install --upgrade fastapi uvicorn
          poetry run uvicorn mocks.mock_finastra_api:app --host 0.0.0.0 --port 8000 &
          # Wait for the server to start
          for i in {1..10}; do
            nc -z 127.0.0.1 8000 && break
            echo "Waiting for mock API..." && sleep 1
          done
        
      - name: Run pytest
        run: poetry run pytest

      - name: Set up Node.js for AJV
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install AJV CLI
        run: npm install -g ajv-cli

      - name: Generate test data for schema validation
        run: |
          poetry run python - <<'PY'
          from treasury_orchestrator.cli import main
          import sys
          sys.argv = ['cli.py', '100000.00']
          main()
          PY
          > test_output.json

      - name: Validate JSON schema
        run: npx ajv validate -s schemas/sweep_order.schema.json -d test_output.json

      - name: Run linting
        run: |
          poetry run black --check .
          poetry run isort --check-only .

      - name: Run type checking
        run: poetry run mypy treasury_orchestrator

  deploy-kind:
    runs-on: ubuntu-latest
    needs: test-python-poetry
    steps:
      - uses: actions/checkout@v4
      - uses: container-tools/kind-action@v2
        with:
          version: v0.20.0
      - uses: azure/setup-helm@v3
        with:
          version: v3.12.3
      - name: Install chart
        run: helm install bankers kubernetes/helm --wait --timeout 300s
