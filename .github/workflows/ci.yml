name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

env:
  POETRY_VERSION: "1.8.3"
  PYTHON_VERSION: "3.11"

jobs:
  # ────────────────────────────────
  # Detect whether the Go service exists
  # ────────────────────────────────
  detect-go:
    runs-on: ubuntu-latest
    outputs:
      has_go: ${{ steps.check.outputs.has_go }}
    steps:
      - uses: actions/checkout@v4
      - id: check
        run: |
          if [ -f services/ledger/go.mod ]; then
            echo "has_go=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_go=false" >> "$GITHUB_OUTPUT"
          fi

  # ────────────────────────────────
  # Go unit tests + Docker build (only if present)
  # ────────────────────────────────
  test-go:
    runs-on: ubuntu-latest
    needs: detect-go
    if: ${{ needs.detect-go.outputs.has_go == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Download deps
        working-directory: services/ledger
        run: go mod download
      - name: Run Go tests
        working-directory: services/ledger
        run: go test ./... -v
      - name: Build ledger image
        working-directory: services/ledger
        run: docker build -t ledger .

  # ────────────────────────────────
  # SDK wheel / integration matrix
  # ────────────────────────────────
  python-sdk-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12, 3.13]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install SDK test deps
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .
          pip install "SQLAlchemy>=1.4,<2.0" requests pytest pytest-cov
      - name: Run SDK unit tests with coverage
        env:
          BANKERSBANK_INTEGRATION: "0"
        run: pytest --cov=bankersbank --cov-report=xml --cov-report=term tests/unit
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}
          path: coverage.xml

  # ────────────────────────────────
  # Poetry-based workflow (lint + unit tests)
  # ────────────────────────────────
  test-python-poetry:
    name: Lint & Unit Tests (Poetry)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true
      - name: Cache Poetry venv
        uses: actions/cache@v4
        with:
          path: ./.venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('poetry.lock') }}
      - name: Install deps
        run: poetry install --no-interaction --with dev
      - name: Run python tests
        env:
          BANKERSBANK_INTEGRATION: "0"
        run: poetry run pytest -q

  # ────────────────────────────────
  # Observability lint
  # ────────────────────────────────
  observability-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Lint Grafana dashboards
        run: for f in grafana/dashboards/*.json; do jq -e . "$f" >/dev/null; done
      - name: Lint Prometheus alert rules
        run: |
          docker run --rm -v "${{ github.workspace }}:/work" -w /work \
          --entrypoint /bin/promtool prom/prometheus:v2.52.0 \
          check rules prometheus/alert_rules/observability.rules.yml

  # ────────────────────────────────
  # Precheck: expose TEST_COLLATERAL_ID_PRIMARY as a job output
  # ────────────────────────────────
  precheck-collateral-secret:
    runs-on: ubuntu-latest
    outputs:
      has_test_collateral: ${{ steps.flag.outputs.has_test_collateral }}
    steps:
      - name: Compute flag from secret
        id: flag
        env:
          TEST_COLLATERAL_ID_PRIMARY: ${{ secrets.TEST_COLLATERAL_ID_PRIMARY }}
        run: |
          if [ -n "$TEST_COLLATERAL_ID_PRIMARY" ]; then
            echo "has_test_collateral=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_test_collateral=false" >> "$GITHUB_OUTPUT"
          fi

  # ────────────────────────────────
  # Finastra Collaterals live smoke
  # ────────────────────────────────
  fin-collaterals-live:
    name: "Finastra Collaterals Live Smoke"
    runs-on: ubuntu-latest
    needs: precheck-collateral-secret
    if: ${{ needs.precheck-collateral-secret.outputs.has_test_collateral == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest httpx
      - name: Run live smoke (pytest marker)
        env:
          FEATURE_FINASTRA_COLLATERALS: "1"
          FINASTRA_TOKEN_STRATEGY: client_credentials
          FINASTRA_CLIENT_ID: ${{ secrets.FINASTRA_B2B_CLIENT_ID }}
          FINASTRA_CLIENT_SECRET: ${{ secrets.FINASTRA_B2B_CLIENT_SECRET }}
          FINASTRA_BASE_URL: ${{ secrets.FINASTRA_B2B_BASE_URL_COLLATERALS }}
          FINASTRA_TENANT: sandbox
          FINASTRA_SCOPE: ${{ secrets.FINASTRA_SCOPE }}
          TEST_COLLATERAL_ID_PRIMARY: ${{ secrets.TEST_COLLATERAL_ID_PRIMARY }}
        run: pytest -q tests/test_finastra_client.py -k test_live_list_collaterals_smoke
