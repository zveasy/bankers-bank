name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # ────────────────────────────────
  # Detect whether the Go service exists
  # ────────────────────────────────
  detect-go:
    runs-on: ubuntu-latest
    outputs:
      has_go: ${{ steps.check.outputs.has_go }}
    steps:
      - uses: actions/checkout@v4
      - id: check
        run: |
          if [ -f services/ledger/go.mod ]; then
            echo "has_go=true" >> $GITHUB_OUTPUT
          else
            echo "has_go=false" >> $GITHUB_OUTPUT
          fi
  # ────────────────────────────────
  # Go unit tests + Docker build (only if present)
  # ────────────────────────────────
  test-go:
    runs-on: ubuntu-latest
    needs: detect-go
    if: ${{ needs.detect-go.outputs.has_go == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Download deps
        working-directory: services/ledger
        run: go mod download

      - name: Run Go tests
        working-directory: services/ledger
        run: go test ./... -v

      - name: Build ledger image
        working-directory: services/ledger
        run: docker build -t ledger .

  # ────────────────────────────────
  # SDK wheel / integration matrix
  # ────────────────────────────────
  python-sdk-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12, 3.13]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip and install test deps
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov fastapi uvicorn jsonschema
      - name: Install SDK in editable mode
        run: pip install -e ./sdk/python

      - name: Ensure netcat present
        run: |
          sudo apt-get update
          sudo apt-get install -y netcat-openbsd || sudo apt-get install -y netcat
      - name: Start mock Finastra API
        env:
          USE_MOCK_BALANCES: 1
        run: |
          uvicorn mocks.mock_finastra_api:app --host 0.0.0.0 --port 8000 &
          for i in {1..10}; do
            nc -z 127.0.0.1 8000 && break
            echo "Waiting for mock API..." && sleep 1
          done
      - name: Add repo root to PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

      - name: Run Python integration tests with coverage
        env:
          USE_MOCK_BALANCES: 1
          MOCK_API_URL: http://127.0.0.1:8000
        run: pytest --cov=bankersbank --cov-report=xml --cov-report=term integration-client

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}
          path: coverage.xml

  # ────────────────────────────────
  # Poetry-based workflow with Redis & Redpanda
  # ────────────────────────────────
  test-python-poetry:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies (if not cached)
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Install SDK package (editable)
        run: poetry run pip install -e sdk/python

      - name: Ensure curl & netcat available
        run: sudo apt-get update && sudo apt-get install -y curl netcat-openbsd

      - name: Start Redis (Docker)
        run: |
          docker run -d --name ci-redis -p 6379:6379 redis:7
          for i in {1..30}; do
            nc -z 127.0.0.1 6379 && echo "Redis is up" && break
            echo "Waiting for Redis..." && sleep 1
          done
      - name: Start Redpanda (Docker)
        run: |
          docker run -d --name ci-redpanda -p 9092:9092 -p 9644:9644 \
            redpandadata/redpanda:latest \
            redpanda start --overprovisioned --smp 1 --memory 1G --reserve-memory 0M --node-id 0 --check=false
          # Wait for Admin API readiness
          for i in {1..60}; do
            curl -fsS http://127.0.0.1:9644/v1/status/ready && echo "Redpanda ready" && break
            echo "Waiting for Redpanda..." && sleep 1
          done
          # Also ensure Kafka socket ready
          for i in {1..60}; do
            nc -z 127.0.0.1 9092 && echo "Kafka socket ready" && break
            echo "Waiting for Kafka socket..." && sleep 1
          done
      - name: Start mock Finastra API
        run: |
          poetry run pip install --upgrade fastapi uvicorn
          poetry run uvicorn mocks.mock_finastra_api:app --host 0.0.0.0 --port 8000 &
          for i in {1..10}; do
            nc -z 127.0.0.1 8000 && break
            echo "Waiting for mock API..." && sleep 1
          done
      - name: Run pytest
        env:
          REDIS_URL: redis://127.0.0.1:6379/0
          KAFKA_BOOTSTRAP: 127.0.0.1:9092
          USE_MOCK_BALANCES: "1"
          MOCK_API_URL: http://127.0.0.1:8000
          QUANT_DB_DIR: ${{ github.workspace }}/.data
        run: poetry run pytest -q

      - name: Dump service logs on failure
        if: failure()
        run: |
          docker logs ci-redis || true
          docker logs ci-redpanda || true
      - name: Cleanup containers
        if: always()
        run: |
          docker rm -f ci-redis ci-redpanda || true
      - name: Set up Node.js for AJV
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install AJV CLI + formats
        run: npm install -g ajv-cli ajv-formats

      - name: Generate test data for schema validation
        run: |
         python - <<'PY'
    import json, sys, time
    payload = {
      "order_id": "ORD-123",
      "source_account": "ACCT-1",
      "target_product": "MMF-ABC",
      "amount_usd": "100000.00",
      "cutoff_utc": "2025-08-06T10:37:01Z",
      "risk_checks": {"var_limit_bps": 10, "observed_var_bps": 5},
      "created_ts": "2025-08-06T10:37:01Z",
    }
    with open("test_output.json", "w", encoding="utf-8") as f:
        json.dump(payload, f, separators=(",", ":"))
    PY
    # sanity-check: file exists and has content
    test -s test_output.json || (echo "test_output.json is empty" >&2; exit 1)
    # pretty-print to logs (optional)
    python - <<'PY'
    import json; print(json.dumps(json.load(open("test_output.json")), indent=2))
    PY
      - name: Validate JSON schema
        run: npx ajv validate -s schemas/sweep_order.schema.json -d test_output.json -c ajv-formats --spec=draft7

      - name: Run linting
        run: |
          poetry run black --check .
          poetry run isort --check-only .
      - name: Run type checking
        run: poetry run mypy treasury_orchestrator

  # ────────────────────────────────
  # Helm smoke on kind
  # ────────────────────────────────
  deploy-kind:
    runs-on: ubuntu-latest
    needs: test-python-poetry
    steps:
      - uses: actions/checkout@v4
      - uses: container-tools/kind-action@v2
        with:
          version: v0.20.0
      - uses: azure/setup-helm@v3
        with:
          version: v3.12.3
      - name: Install chart
        run: helm install bankers kubernetes/helm --wait --timeout 300s
      - name: Validate alert rules
        run: promtool test rules prom/alert.rules.yml
      - name: Check metrics endpoint
        run: |
          kubectl wait --for=condition=available --timeout=120s deployment/prometheus
          curl -s prometheus-svc:8001/metrics | grep treas_ltv_ratio
  # ────────────────────────────────
  # docker compose build + smoke
  # ────────────────────────────────
  compose-smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build images
        run: docker compose build

      - name: Start stack
        run: docker compose up -d

      - name: Wait for health (bank_connector, asset_aggregator)
        run: |
          python - <<'PY'
          import time, urllib.request, sys
          def wait(url, path="/healthz", tries=90, delay=1.0):
              for _ in range(tries):
                  try:
                      with urllib.request.urlopen(url+path, timeout=2) as r:
                          if r.status == 200:
                              return
                  except Exception:
                      pass
                  time.sleep(delay)
              print(f"Timed out waiting for {url}{path}", file=sys.stderr)
              sys.exit(1)
          wait("http://127.0.0.1:8003")   # bank_connector
          wait("http://127.0.0.1:9000")   # asset_aggregator
          PY
      - name: Install Python + requests for smoke
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: python -m pip install --upgrade pip requests

      - name: Run smoke tests
        env:
          BANK_CONNECTOR_URL: http://127.0.0.1:8003
          ASSET_AGGREGATOR_URL: http://127.0.0.1:9000
        run: python scripts/smoke_e2e.py

      - name: Dump compose logs on failure
        if: failure()
        run: docker compose logs --no-color > compose-logs.txt

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: compose-logs
          path: compose-logs.txt

      - name: Teardown
        if: always()
        run: docker compose down -v
