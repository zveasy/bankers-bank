name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

env:
  POETRY_VERSION: "1.8.3"
  PYTHON_VERSION: "3.11"

jobs:
  # -------------------------------
  # Lint + Unit tests (matrix ready later)
  # -------------------------------
  test-python-poetry:
    name: Lint & Unit Tests (Poetry)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache Poetry venv
        uses: actions/cache@v4
        with:
          path: ./.venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install deps
        run: poetry install --no-interaction

      - name: Lint (ruff if present)
        run: |
          if poetry run python - << 'PY'
          import importlib, sys
          sys.exit(0 if importlib.util.find_spec("ruff") else 1)
          PY
                    then poetry run ruff check .
                    else echo "ruff not installed; skipping"
                    fi

                - name: Type check (mypy if present)
                  run: |
                    if poetry run python - << 'PY'
          import importlib, sys
          sys.exit(0 if importlib.util.find_spec("mypy") else 1)
          PY
                    then poetry run mypy .
                    else echo "mypy not installed; skipping"
                    fi

                - name: Run unit tests
                  run: poetry run pytest -q

  # -------------------------------
  # Offline smokes for Finastra A&B (fixes httpx import)
  # -------------------------------
  smoke-accounts-balances-offline:
    name: Smoke (offline) — Finastra Accounts & Balances
    runs-on: ubuntu-latest
    needs: [test-python-poetry]
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache Poetry venv
        uses: actions/cache@v4
        with:
          path: ./.venv
          key: venv-smoke-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-smoke-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      # ---- base deps + smoke deps (THIS fixes "ModuleNotFoundError: httpx")
      - name: Install base deps
        run: poetry install --no-interaction

      - name: Install smoke deps group
        run: |
          # Requires pyproject.toml to define:
          # [tool.poetry.group.smoke]
          # [tool.poetry.group.smoke.dependencies]
          # httpx = "^0.27"
          poetry install --with smoke --no-interaction
          poetry run python -c "import httpx; print('httpx', httpx.__version__)"

      # ---- env + PYTHONPATH
      - name: Add repo root to PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> "$GITHUB_ENV"

      - name: Copy CI env → .env
        run: |
          if [ -f ".env.ci" ]; then
            cp .env.ci .env
          else
            echo "::error::.env.ci not found; add one with safe placeholders"
            exit 1
          fi

      # ---- Optional DB init (non-fatal if you don't use it)
      - name: Initialize DB schema (alembic or script, optional)
        shell: bash
        run: |
          set -e
          if [ -f "alembic.ini" ]; then
            echo "[db-init] Running alembic upgrade head"
            poetry run alembic upgrade head || {
              echo "::warning::Alembic failed; continuing (offline smokes may not need DB)"
            }
          elif [ -f "scripts/init_db.py" ]; then
            echo "[db-init] Running scripts/init_db.py"
            poetry run python scripts/init_db.py || {
              echo "::warning::init_db.py failed; continuing"
            }
          else
            echo "[db-init] No alembic.ini or scripts/init_db.py; skipping"
          fi

      # ---- Run offline smokes
      - name: Run accounts smoke
        run: poetry run python scripts/smoke_finastra_accounts.py

      - name: Run balances smoke
        run: poetry run python scripts/smoke_finastra_balances.py

      - name: Always show last logs on failure
        if: failure()
        run: |
          echo "No container logs (offline run). Dumping tree for context:"
          ls -la
